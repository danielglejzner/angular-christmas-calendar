{
    "data": [
      {
        "day": 1,
        "contents": [
          {
            "author": {
              "name": "Muhammad Ahsan Ayaz",
              "avatarUrl": "https://pbs.twimg.com/profile_images/1856068988599410688/bae3mW-B_400x400.jpg",
              "brandImageUrl": "https://ng-cookbook.com/assets/images/ng-cookbook-black.jpg",
              "brandExternalUrl": "https://ng-cookbook.com",
              "resourceName":"Checkout my book here :) --->",
              "socialAccountsData": {
                "twitterHandle": "codewith_ahsan"
              }
            },
            "videoSrc": "https://streamable.com/e/khn33q?",
            "gift": false
          }
        ]
      },
      {
        "day": 2,
        "contents": [
          {
            "author": {
              "name": "Tomas Trajan",
              "avatarUrl": "https://pbs.twimg.com/profile_images/1777007964588498944/4ZSKA6d9_400x400.jpg",
              "brandImageUrl": "https://angularexperts.imgix.net/assets/images/products/ebook-angular-enterprise-architecture/v2/cover.webp?auto=format&w=1200",
              "brandExternalUrl": "https://angularexperts.io/products/ebook-angular-enterprise-architecture",
              "resourceName":"Checkout Angular Enterprise Architecture book to make your app more robust :) --->",
              "socialAccountsData": {
                "twitterHandle": "tomastrajan"
              }
            },
            "videoSrc": "https://streamable.com/e/ivusrf?",
            "gift": false
          }
        ]
      },
      {
        "day": 3,
        "contents": [
          {
            "author": {
              "name": "Armen Vardanyan",
              "avatarUrl": "https://pbs.twimg.com/profile_images/1513478511008403456/RRUaF4lv_400x400.jpg",
              "socialAccountsData": {
                "twitterHandle": "Armandotrue"
              },
              "brandImageUrl": "https://images.manning.com/360/480/resize/book/a/d90212a-3c3b-474b-9038-770a0a50ceb2/Vardanyan-MEAP-HI.png",
              "brandExternalUrl": "https://www.manning.com/books/modern-angular?ref=angularspace.com",
              "resourceName": "Checkout my book here :) --->"
            },
            "videoSrc": "https://streamable.com/e/si1ltp?",
            "gift": false
          },
          {
            "author": {
              "name": "Roberto Heckers",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4E03AQHgwJDpB_-HIw/profile-displayphoto-shrink_800_800/B4EZNo4UYfHEAk-/0/1732631414879?e=1738800000&v=beta&t=esxCLQ0RB2KQzE4bh8jk94d1uqP0fyPclTjNFAdh9-M",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/roberto-heckers-2313453b/"
              },
              "brandImageUrl": "https://content.packt.com/B21625/cover_image.jpg",
              "brandExternalUrl": "https://www.packtpub.com/en-us/product/effective-angular-9781805125532",
              "resourceName": "Checkout my book here :) --->"
            },
            "videoSrc": "https://streamable.com/e/69umub?",
            "gift": false
          }
        ]
      },
      {
        "day": 4,
        "contents": [
          {
            "author": {
              "name": "Lars Gyrup Brink Nielsen",
              "avatarUrl": "https://avatars.githubusercontent.com/u/6364586?v=4",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/larsgbn/"
              },
              "brandImageUrl": "https://dev-to-uploads.s3.amazonaws.com/uploads/organization/profile_image/3316/b77c881d-527b-4295-9e3c-3aa9072a4671.png",
              "brandExternalUrl": "https://dev.to/this-is-angular",
              "resourceName": "This is Angular"
            },
            "gift": false,
            "videoSrc": "https://streamable.com/e/murjq3"
          }
        ]
      },
      {
        "day": 5,
        "contents": [
          {
            "author": {
              "name": "Kasia Biernat-Kluba",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/C4D03AQFOe8ZqEdxjAg/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1648558543647?e=1738800000&v=beta&t=ZQkvoxJN9zdlIj7fTuvrZJexNT3cv07hv4SM7-CZDPU",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/kbiernat/"
              },
              "brandImageUrl": "https://cdn.icon-icons.com/icons2/3041/PNG/512/medium_logo_icon_189223.png",
              "brandExternalUrl": "https://kasiabiernat.github.io/",
              "resourceName": "Checkout my Blog :)"
            },
            "gift": false,
            "videoSrc": "https://streamable.com/e/9mszti"
          }
        ]
      },
      {
        "day": 6,
        "contents": [
          {
            "author": {
              "name": "Trung Vo",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4D03AQEJXlh31pNhKg/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1698198796890?e=1738800000&v=beta&t=B-CTHPQmiMHflYslXxpW2T8Ufbw-MSzaWPB_-3215Jk",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/trungvose/"
              },
              "brandImageUrl": "https://cdn-icons-png.flaticon.com/256/25/25231.png",
              "brandExternalUrl": "https://github.com/trungvose/angular-spotify",
              "resourceName": "Checkout my Open Source Spotify app made with Angular!"
            },
            "gift": false,
            "videoSrc": "https://streamable.com/e/udld6p"
          }
        ]
      },
      {
        "day": 7,
        "contents": [
          {
            "author": {
              "name": "Alain Boudard",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4E03AQEWKpccaRqrnQ/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1700234785743?e=1738800000&v=beta&t=fFvWUXdnSk38AYUSjFD3sNtvm2EDllPKvHwKTM296Ys",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/alain-boudard-2632b631/"
              },
              "brandImageUrl": "",
              "brandExternalUrl": "",
              "resourceName": ""
            },
            "videoSrc": "https://streamable.com/e/5ejkn6",
            "gift": false
          },
          {
            "author": {
              "name": "Gérôme Grignon",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4E03AQHJ4iONCWAfvw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1731491580423?e=1738800000&v=beta&t=hOeEtt7ku_zxPQIr1n2jA1tCfjleejKN5_BSRzPDCKg",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/gerome-grignon-2313453b/"
              },
              "brandImageUrl": "https://www.angular.courses/logo.png",
              "brandExternalUrl": "https://www.angular.courses/",
              "resourceName": "Checkout my courses & projects --->"
            },
            "videoSrc": "https://streamable.com/e/gpmexb?",
            "gift": false
          }
        ]
      },
      {
        "day": 8,
        "contents": [
          {
            "author": {
              "name": "Rainer Hahnekamp",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4E03AQEkoqMsUrpcew/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1692872234779?e=1739404800&v=beta&t=gyxOPtjRL0ZS1aXL2XgFY9UDdPSvBeDW1DIYhKuDFME",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/rainerhahnekamp/"
              },
              "brandImageUrl": "https://yt3.googleusercontent.com/jCQ_KQYefhSxwDZGRq17dJPkVtJ5XCrZkHzTFLy1DgOMXmePbjATIHzyhHJlhtXYVmyy-Qg3XmY=s160-c-k-c0x00ffffff-no-rj",
              "brandExternalUrl": "https://www.youtube.com/@ng-news",
              "resourceName": "Checkout my NG-NEWS YouTube Channel -->"
            },
            "videoSrc": "https://streamable.com/e/og9j4m",
            "gift": false
          }
        ]
      },
      {
        "day": 9,
        "contents": [
          {
            "author": {
              "name": "Michael Egger-Zikes",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4D03AQEVU14n4_sgPA/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1664815517419?e=1739404800&v=beta&t=OgDWw-hhmfq1Dm1VUov4Mztyzo2gNqQNZetkhwQyiQ0",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/michael-egger-zikes/"
              },
              "brandImageUrl": "https://www.angulararchitects.io/wp-content/uploads/2023/07/arc-logo.png",
              "brandExternalUrl": "https://www.angulararchitects.io/en/",
              "resourceName": "Checkout Angular Architects website! --->"
            },
            "videoSrc": "https://streamable.com/e/jkffuu",
            "gift": false
          }
        ]
      },
      {
        "day": 10,
        "contents": [
          {
            "author": {
              "name": "Doug Parker",
              "avatarUrl": "https://cdn.bsky.app/img/avatar/plain/did:plc:gimav74bq5zm6kfa5pt35ro5/bafkreidky2h6ylbg6w6hhuz5jmbamgnzv4672kle2x3ki4ou3syctwudja@jpeg",
              "socialAccountsData": {
                "linkedInUrl": "https://bsky.app/profile/develwithoutacause.dwac.dev"
              },
              "brandImageUrl": "https://repository-images.githubusercontent.com/49016322/0a1e8bee-99b1-4044-9b83-4bdb6befcde9",
              "brandExternalUrl": "https://angular.dev/",
              "resourceName": ""
            },
            "videoSrc": "https://streamable.com/e/dozwdp",
            "gift": false
          }
        ]
      },
      {
        "day": 11,
        "contents": [
          {
            "author": {
              "name": "Deborah Kurata",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D5603AQGhOaacDfyxNw/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1668636766409?e=1739404800&v=beta&t=C4jbDwaKdrt9jeNYZ5MWtzLe_krMqZDGrVGC14dn-JU",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/deborahkurata/"
              },
              "brandImageUrl": "https://repository-images.githubusercontent.com/49016322/0a1e8bee-99b1-4044-9b83-4bdb6befcde9",
              "brandExternalUrl": "https://www.youtube.com/@deborah_kurata",
              "resourceName": "Check out my YouTube channel --->"
            },
            "videoSrc": "https://streamable.com/e/2e90kx",
            "gift": false
          }
        ]
      },
      {
        "day": 12,
        "contents": [
          {
            "author": {
              "name": "Ankita Sood",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D5603AQEmGZGn7FZd_g/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1698680434361?e=1739404800&v=beta&t=t_VCu8ZPrx0ol-ML2NoXnHp-5EfCWnhVnZCWvQW6Al4",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/soodankita/"
              },
              "brandImageUrl": "",
              "brandExternalUrl": "",
              "resourceName": ""
            },
            "videoSrc": "https://streamable.com/e/tl374j",
            "gift": false
          }
        ]
      },
      {
        "day": 13,
        "contents": [
          {
            "author": {
              "name": "Brygida Fiejdasz",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4D03AQGqnjMTgX8VZQ/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1715372129501?e=1739404800&v=beta&t=0yxKQKvVw8-9aMdNzq-RHbO7_rCjNs7lty2qWadGmlI",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/brygidafiejdasz/"
              },
              "brandImageUrl": "https://cdn.prod.website-files.com/65b8d9e0af2c51a8738e2bf7/6675a6c01e8dc8f84c517969_Youtube%20Logo.png",
              "brandExternalUrl": "https://www.youtube.com/@SpeedDateWithAngular/shorts",
              "resourceName": "Check out my YouTube channel :) -->"
            },
            "videoSrc": "https://streamable.com/e/u7ucs9",
            "gift": false
          }
        ]
      },
      {
        "day": 14,
        "contents": [
          {
            "author": {
              "name": "Brecht Billiet",
              "avatarUrl": "https://pbs.twimg.com/profile_images/1731255790143422464/6tLl9XeR_400x400.jpg",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/brecht-billiet-58417426/"
              },
              "brandImageUrl": "https://kajabi-storefronts-production.kajabi-cdn.com/kajabi-storefronts-production/file-uploads/themes/2154178170/settings_images/cc7d83b-d26b-7154-c7f5-55e617e5625_largescalearchitecture-small.jpg ",
              "brandExternalUrl": "https://www.simplified.courses/largescale-angular-enterprise-architecture",
              "resourceName": "Large-scale Angular Enterprise Architecture course -->"
            },
            "videoSrc": "https://streamable.com/e/1yl826",
            "gift": false
          }
        ]
      },
      {
        "day": 15,
        "contents": [
          {
            "author": { 
              "name": "Dmytro Mezhenskyi",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/C4E03AQGjL7lNUrk67g/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1629367677666?e=1740009600&v=beta&t=1n3siukN8zSlG2GQiXG8mpPlMbSqxt7Rz6jRT60dAvE",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/dmezhenskyi/"
              },
              "brandImageUrl": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQtQSRVJMugYbLKVkNImFP8kOxE3XOmxRkmYw&s",
              "brandExternalUrl": "https://courses.decodedfrontend.io/",
              "resourceName": "Grab Christmas 20% Discount on my courses :) -->"
            },
            "videoSrc": "https://streamable.com/e/40n1gi",
            "gift": true
          }
        ]
      },
      {
        "day": 16,
        "contents": [
          {
            "author": {
              "name": "Alex Rickabaugh",
              "avatarUrl": "https://cdn.bsky.app/img/avatar/plain/did:plc:yibyeu3cbjltvehik2ir44oy/bafkreigw57x54ap2z2ev7r7huw6r7hajmyqi7mqdhqncalohvjf4euotiq@jpeg",
              "socialAccountsData": {
                "linkedInUrl": "https://bsky.app/profile/synalx.bsky.social"
              },
              "brandImageUrl": "https://images.ctfassets.net/zojzzdop0fzx/2LzaUqPdXBjtAbFTaDGbW0/a8b4fbfd6ccab7d6de4c3b0803a35ae5/angular_gradient.svg?fm=webp&w=256&q=75",
              "brandExternalUrl": "https://angular.dev/",
              "resourceName": ""
            },
            "videoSrc": "https://streamable.com/e/9w2j8z",
            "gift": false
          }
        ]
      },
      {
        "day": 17,
        "contents": [
          {
            "author": {
              "name": "Marcin Milewicz",
              "avatarUrl": "https://cdn.bsky.app/img/avatar/plain/did:plc:g72sn6pwueej3abcuh5esio7/bafkreiaa23pox5lon6qx6dsumjktm3gcbnxt33fcmtdfh7kptadknngmci@jpeg",
              "socialAccountsData": {
                "linkedInUrl": "https://bsky.app/profile/synalx.bsky.social"
              },
              "brandImageUrl": "https://cdn.bsky.app/img/avatar/plain/did:plc:g72sn6pwueej3abcuh5esio7/bafkreiaa23pox5lon6qx6dsumjktm3gcbnxt33fcmtdfh7kptadknngmci@jpeg",
              "brandExternalUrl": "https://linktr.ee/marcinmilewicz",
              "resourceName": "Check out my work/content here :) --->"
            },
            "videoSrc": "https://streamable.com/e/rsb6z9",
            "gift": false
          }
        ]
      },
      {
        "day": 18,
        "contents": [
          {
            "author": {
              "name": "Mateusz Łędzewicz",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4D03AQEgRjEMHYd7Pg/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1683580841160?e=1740009600&v=beta&t=hpRkuFOVyx1sk_zZ98umm4BH0Q7gEwMPQx3QLxdfXVE",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/mateusz-%C5%82%C4%99dzewicz-36197080/"
              },
              "brandImageUrl": "https://lowgular.io/wp-content/uploads/2020/09/LOGO_BLUE.svg",
              "brandExternalUrl": "https://lowgular.io/",
              "resourceName": "Checkout Lowgular!! --->"
            },
            "videoSrc": "https://streamable.com/e/v77os8",
            "gift": true
          }
        ]
      },
      {
        "day": 19,
        "contents": [
          {
            "author": {
              "name": "Mark Techson",
              "avatarUrl": "https://cdn.bsky.app/img/avatar/plain/did:plc:j5sogsw5ejwwo6megyxxdwri/bafkreicb2jmlm5rgupsi7b55sduu6xxhhehnl33ju2lvfayzkzocs5uw6m@jpeg",
              "socialAccountsData": {
                "linkedInUrl": "https://bsky.app/profile/marktechson.com"
              },
              "brandImageUrl": "https://images.ctfassets.net/zojzzdop0fzx/2LzaUqPdXBjtAbFTaDGbW0/a8b4fbfd6ccab7d6de4c3b0803a35ae5/angular_gradient.svg?fm=webp&w=256&q=75",
              "brandExternalUrl": "https://angular.dev/",
              "resourceName": ""
            },
            "videoSrc": "https://streamable.com/e/aarynu",
            "gift": false
          }
        ]
      },
      {
        "day": 20,
        "contents": [
          {
            "author": {
              "name": "Tomasz Ducin",
              "avatarUrl": "https://cdn.bsky.app/img/avatar/plain/did:plc:qvna4hu5w3fk3nkgsn7i6l3g/bafkreibsk4sghd6svg4pz2uxd5jcrour2mdnigi5gqyix2rbltvobwuwaq@jpeg",
              "socialAccountsData": {
                "linkedInUrl": "https://bsky.app/profile/ducin.dev"
              },
              "brandImageUrl": "https://avatars.githubusercontent.com/u/23141053?s=280&v=4",
              "brandExternalUrl": "https://ducin.dev/",
              "resourceName": "Checkout my website! --->"
            },
            "videoSrc": "https://streamable.com/e/fyp14d",
            "gift": false
          }
        ]
      },
      {
        "day": 21,
        "contents": [
          {
            "author": {
              "name": "Sonu Kapoor",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D5603AQFckw16Q4qOgQ/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1729557793297?e=1740009600&v=beta&t=m3Nl4Mujng_a1TK4LdD24aHJoNsghJSmKj4qfwBaG5Q",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/sonu-kapoor/"
              },
              "brandImageUrl": "https://pbcdn1.podbean.com/imglogo/image-logo/18582118/angular-catch-up_1485_x_1485.png",
              "brandExternalUrl": "https://www.podbean.com/pu/pbblog-wjhhf-11b8a66",
              "resourceName": "Checkout Podcast I'm Co-Hosting --->"
            },
            "videoSrc": "https://streamable.com/e/yhl9xc",
            "gift": true
          }
        ]
      },
      {
        "day": 22,
        "contents": [
          {
            "author": {
              "name": "Manfred Steyer",
              "avatarUrl": "https://media.licdn.com/dms/image/v2/D4D03AQFrtmNYZYFjRA/profile-displayphoto-shrink_800_800/profile-displayphoto-shrink_800_800/0/1718295084120?e=1740614400&v=beta&t=QqQcwOgmL0ee10PeQiL8FS76Ic5Ep_VrIqhfWt2_nA0",
              "socialAccountsData": {
                "linkedInUrl": "https://www.linkedin.com/in/manfred-steyer-84645821/"
              },
              "brandImageUrl": "https://www.angulararchitects.io/wp-content/uploads/2023/07/arc-logo.png",
              "brandExternalUrl": "https://www.angulararchitects.io/en/",
              "resourceName": "Checkout Angular Architects website! --->"
            },
            "videoSrc": "https://streamable.com/e/bvebyl",
            "gift": true
          }
        ]
      },
      {
        "day": 23,
        "contents": [
          {
            "author": {
              "name": "Alyssa Nicoll",
              "socialAccountsData": {
                "twitterHandle": "AlyssaNicoll"
              },
              "avatarUrl": "https://pbs.twimg.com/profile_images/1717455185201491968/ZF2suPcm_400x400.jpg",
              "brandImageUrl": "https://angularair.com/assets/angularairlogo.png",
              "brandExternalUrl": "https://www.youtube.com/AngularAirPodcast",
              "resourceName": "Resources:"
            },
            "videoSrc": "https://streamable.com/e/1hgepd",
            "gift": true
          },
          {
            "author": {
              "name": "Mike F. Pearson",
              "avatarUrl": "https://media2.dev.to/dynamic/image/width=320,height=320,fit=cover,gravity=auto,format=auto/https%3A%2F%2Fdev-to-uploads.s3.amazonaws.com%2Fuploads%2Fuser%2Fprofile_image%2F71258%2F5b7877dc-8a35-4f9f-b5a7-567f157bc394.png",
              "brandImageUrl": "https://state-adapt.github.io/assets/sa3-3.svg",
              "brandExternalUrl": "https://state-adapt.github.io/angular",
              "resourceName": "Resources",
              "socialAccountsData": {
                "twitterHandle": "mfpears"
              }
            },
            "gift": true,
            "descriptionHtml": "<article>\n  <h2>Why and how to avoid effect in 2025</h2>\n  <p><strong>effect</strong> is essential in any signals library, but in application code, alternatives will always lead to cleaner code.</p>\n\n  <p>effect requires defining a callback function, which can only mutate state that's defined elsewhere. This is imperative rather than declarative. Imperative code scatters control logic, so the more imperative code you have, the harder it is to tease out the logic that is relevant to specific behaviors. There is no other way to use effect.</p>\n\n  <p>In this example, <code>idx</code> is declared as <code>0</code>:</p>\n\n  <pre><code>idx = signal(0);\n</code></pre>\n\n  <p>But what if you find out that it changes to <code>1</code>, then <code>2</code>, and so on, every 5 seconds? Now you have to go on a hunt for references to <code>idx</code> that might be mutating it. So you find this:</p>\n\n  <pre><code>effect((onCleanup) => {\n  const dt = this.dt();\n  const int = setInterval(() => {\n    this.idx.update((n) => n + 1);\n  }, dt);\n  onCleanup(() => clearInterval(int));\n});\n</code></pre>\n\n  <p>Are you sure this is the only thing mutating <code>idx</code>?</p>\n\n  <p>Well, you would be wrong!</p>\n\n  <pre><code>effect(() => {\n  this.slides.value();\n  this.dt.set(5000);\n  this.idx.set(0);\n});\n</code></pre>\n\n  <p>Now here's all the code, color-coded by what behavior is being defined:</p>\n\n  <h3>Imperative slides code with effects</h3>\n\n  <p><code>dt</code> is defined/controlled in 2 places, and <code>idx</code> is defined/controlled in 3 places. (Not counting anything from the template.)</p>\n\n  <p>Small examples are fine, but when this is the prevailing pattern in a codebase, it quickly gets out of hand, and there is no single place where the problem can be fixed. It requires a complete rewrite. Here's an example of an imperative codebase I rewrote to declarative:</p>\n\n  <h3>Large example - imperative vs declarative</h3>\n\n  <p>I've written about the problems with imperative code and the benefits of declarative code ad nauseam. For more, take a look at <a href=\"#\">5 reasons to avoid imperative code</a> and <a href=\"#\">RxJS can save your codebase</a>.</p>\n\n  <h3>How to avoid effect</h3>\n\n  <p>Every effect is unique in its own stupid way, so the technique will be different each time. So, in 2025, I will be posting weekly examples of rewriting an effect in various real-world projects. The problem is callback functions, so really I will be posting examples of removing callback functions, and effect will account for a large proportion of those. So, follow me on <a href=\"https://x.com/mfpears\">X</a> to see those examples: <a href=\"https://x.com/mfpears\">https://x.com/mfpears</a></p>\n\n  <p>However, the general approach is always the same: Put everything in the declaration somehow.</p>\n\n  <p>Let's do this to the example above.</p>\n\n  <p><code>dt</code> is initially defined as <code>5000</code>, but it is also reset to <code>5000</code> whenever <code>slides.value()</code> gets a new value. Why would it need to be reset if it is already starting at <code>5000</code>? Probably because the user can change it manually in the UI.</p>\n\n  <p>So, how do we define all of this in a single declaration for <code>dt</code>?</p>\n\n  <pre><code>dt = // ?\n</code></pre>\n\n  <p>We need to consider all the behavior. Every time it's set from the template, that becomes the value. Every time <code>slides</code> updates, it becomes <code>5000</code>. Whatever happened last, that's what should define <code>dt</code>. RxJS <code>merge</code> comes to mind:</p>\n\n  <pre><code>dt$ = merge(this.slidesChange$, this.dtFromTemplate$);\n</code></pre>\n\n  <p>We'll worry about how to define these and map them to the right values in a second.</p>\n\n  <p>First, a quick side note: Aren't we done with RxJS now that we have signals? Nope! You should not listen to people who tell you this, probably on any topic. RxJS has been a required dependency of Angular for nearly 10 years, and it will still be a required dependency in 2025. It is more important to code declaratively than to follow every hype train that comes along. Until there are signal utilities to handle all situations, avoiding RxJS is a foolish policy. Use signals sparingly, but use whatever you need to to write clean code, including RxJS sometimes.</p>\n\n  <p>Now, let's just say we use RxJS to fetch the slides:</p>\n\n  <pre><code>slides$ = this.itemsService.fetch();\n</code></pre>\n\n  <p>That will emit every time slides change, so that is already our <code>slidesChange$</code> observable, and we can just map it to <code>5000</code>.</p>\n\n  <pre><code>dt$ = merge(\n  this.slides$.pipe(map(() => 5000)),\n  this.dtFromTemplate$,\n);\n</code></pre>\n\n  <p>How about <code>dtFromTemplate$</code>? Let's just use a signal and use <code>toObservable</code> in the merge.</p>\n\n  <pre><code>dtFromTemplate = signal(5000);\ndt$ = merge(\n  this.slides$.pipe(map(() => 5000)),\n  toObservable(this.dtFromTemplate),\n);\n</code></pre>\n\n  <p>We could have also used a <code>BehaviorSubject</code>, but it doesn't matter at all which we choose, because it is easy to change later. And with both of them, that initial value goes through the merge, so <code>dt$</code> will start at <code>5000</code>.</p>\n\n  <p>Now, how about <code>idx</code>?</p>\n\n  <p>It's similar to <code>dt$</code> because it starts at <code>0</code> and also resets to that every time new slides arrive. It can also be changed from the template. So we can start with that:</p>\n\n  <pre><code>idx$ = merge(\n  this.slides$.pipe(map(() => 0)),\n  toObservable(this.idxFromTemplate),\n);\n</code></pre>\n\n  <p>But it also changes on its own every <code>dt</code> seconds, after it gets a new value in the other ways. So let's take that value and <code>switchMap</code> to an <code>interval</code>, with also <code>switchMap</code> off of <code>dt$</code>:</p>\n\n  <pre><code>idx$ = merge(\n  this.slides$.pipe(map(() => 0)),\n  toObservable(this.idxFromTemplate),\n).pipe(\n  switchMap(idx => this.dt$.pipe(\n    switchMap(dt => interval(dt)),\n    map(t => idx + t + 1), // interval starts at 0 after a second\n    startWith(idx),\n  )),\n);\n</code></pre>\n\n  <p>This is a little bit complicated. But remember what we are comparing to:</p>\n\n  <pre><code>dt = signal(5000);\n\n// ...\n\nidx = signal(0);\n\n// ...\n\nconstructor() {\n  effect((onCleanup) => {\n    const dt = this.dt();\n    const int = setInterval(() => {\n      this.idx.update((n) => n + 1);\n    }, dt);\n    onCleanup(() => clearInterval(int));\n  });\n\n  effect(() => {\n    this.slides.value();\n    this.dt.set(5000);\n    this.idx.set(0);\n  });\n}\n</code></pre>\n\n  <p>Async behavior is just complicated to define, and there's no getting around that. If you're not familiar with <code>interval</code>, you might forget that it waits a second before emitting its first value; but if you're unfamiliar with <code>effect</code> you might accidentally read a signal inside the <code>setInterval</code>, which would make the effect not track it. Or you might forget to manually clear the <code>setInterval</code>. Async is just complicated.</p>\n\n  <p>But the major difference is that RxJS scales gracefully, whereas effect code just gets harder and harder to keep track of as the relationships get more and more tangled.</p>\n\n  <h3>Declarative Flexibility</h3>\n\n  <p>Someone recently said that imperative vs declarative is an unimportant stylistic debate, but this couldn't be further from the truth. The Angular signal work is all for the purpose of facilitating reactive syntax while achieving performance that is closer and closer to vanilla JavaScript. If declarative code was just an unimportant stylistic debate, we could have just stopped at vanilla JavaScript. It had all the performance we still dream of today. It was merely because vanilla JS didn't have declarative templates or declarative state management that we've had all this framework and state management craziness since the jQuery days. It's not a stylistic debate.</p>\n\n  <p>The truth is that declarative code and imperative code are as different from each other as it's possible for code to be. They are inside-out versions of each other. Declarative implementations in Angular vs React are more similar to each other than declarative and imperative implementations in the same framework.</p>\n\n  <p>Since declarative code requires each declaration to be complete in one place, the only ways it can vary are in syntax, which is the actual stylistic debate; and implementation details, which are unimportant unless they suck, which often is the case.</p>\n\n  <p>To me, a stylistic debate is whether our variables have a <code>$</code> at the end. Does it matter? Not at all.</p>\n\n  <p>So, let's say Angular stabilized <code>linkedSignal</code>. How much work is it to swap in <code>linkedSignal</code> in our RxJS solution?</p>\n\n  <p>We would just rewrite</p>\n\n  <pre><code>dtFromTemplate = signal(5000);\ndt$ = merge(\n  this.slides$.pipe(map(() => 5000)),\n  toObservable(this.dtFromTemplate),\n);\n</code></pre>\n\n  <p>as</p>\n\n  <pre><code>dt = linkedSignal(() => this.slides.value() ? 5000 : 5000);\n</code></pre>\n\n  <ul>\n    <li>The initial value will be <code>5000</code> ✅</li>\n    <li>When <code>slides.value</code> emits, it will reset to <code>5000</code> ✅</li>\n    <li>We can call <code>dt.set(whatever)</code> from the template ✅</li>\n  </ul>\n\n  <p>And the only thing we needed to change was the declaration of <code>dt</code>.</p>\n\n  <p>To make it compatible with the rest of the solution, we just need to define <code>dt$</code>:</p>\n\n  <pre><code>dt$ = toObservable(this.dt);\n</code></pre>\n\n  <p>Speaking of the rest of the solution, we can't write that with any signal utilities for the foreseeable future, because it requires <code>interval</code> and <code>switchMap</code> from RxJS.</p>\n\n  <p>However, let's switch to StateAdapt and rewrite</p>\n\n  <pre><code>idxFromTemplate = signal(0);\nidx$ = merge(\n  this.slides$.pipe(map(() => 0)),\n  toObservable(this.idxFromTemplate),\n).pipe(\n  switchMap(idx => \n    this.dt$.pipe(\n      switchMap(dt => interval(dt)),\n      map(t => idx + t + 1), // interval starts at 0 after a second\n      startWith(idx),\n    ),\n);\n</code></pre>\n\n  <p>to</p>\n\n  <pre><code>idx = adapt(0, {\n  sources: [\n    this.slides$.pipe(map(() => 0)),\n    ({ state$ }) => state$.pipe(\n      switchMap(idx => timer(this.dt()).pipe(map(() => idx + 1))),\n    ),\n  ],\n});\n</code></pre>\n\n  <p>And again, we just changed how <code>idx</code> is declared, so it's easy to avoid having to update anything else.</p>\n\n  <p>Now, what about imperative code?</p>\n\n  <p>You would think that imperative code should be just as easy to refactor to other forms of imperative code, but in my experience, that has not been the case. The logic is too scattered and too tangled with various contexts and update mechanisms to be flexibly changed.</p>\n\n  <h3>Final Message</h3>\n\n  <p>I know it's frustrating in this transition period. Everyone has a lot of new ideas about how to do things until they run into corner cases and have to start again from the drawing board. Nobody has been through this exact change before, so we simply don't know what it should look like. And some things that we know are still true are easier said than done, such as avoiding effect, while still leaning into the future with Angular signals.</p>\n\n  <p>But we need to remember what we've learned and not lose it along the way. If you aren't comfortable with all the chaos, and want only black-and-white answers, I would recommend holding off a bit until clearer patterns emerge from the community.</p>\n\n  <p>But if you are excited to live on the bleeding edge of reactivity, I encourage you to explore with me how to take advantage of signals while finding solid ways to avoid effect and other imperative code.</p>\n</article>"
          }
        ]
      },
      {
        "day": 24,
        "contents": []
      }
    ]
  }
